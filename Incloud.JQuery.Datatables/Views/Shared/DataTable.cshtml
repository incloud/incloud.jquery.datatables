@using System.Data.Odbc
@using System.Linq
@using Incloud.JQuery.Datatables
@using Incloud.JQuery.Datatables.Models
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@model DataTableConfigVm

@if (Model.UseDefaultStyle)
{
    <style>
        table{
            width: 100%;
            max-width: 100%;
            border-spacing: 0;
        }

        table tr {
            border-spacing: 0;
            border-collapse: collapse;
        }

        table>thead>tr>th {
            vertical-align: bottom;
            border-bottom: 2px solid #ddd;
            text-align: left;
        }

        table>tbody>tr>td, table>tbody>tr>th, table>tfoot>tr>td, table>tfoot>tr>th, table>thead>tr>td, table>thead>tr>th {
            padding: 8px;
            line-height: 1.42857143;
            vertical-align: top;
            border-top: 1px solid #ddd;
        }

        table>thead:first-child>tr:first-child>td, table>thead:first-child>tr:first-child>th {
            border-top: 0;
        }

        table>tbody>tr:nth-of-type(odd) {
            background-color: #f9f9f9;
        }

        div.dataTables_length, div.dataTables_filter, div.dataTables_info, div.dataTables_paginate{
            margin-bottom: 10px;
        }

         div.dataTables_length input, div.dataTables_filter input{
             margin: 0 5px;
        }

         div.dataTables_info, div.dataTables_paginate {
             text-align: center;
         }

         div.dataTables_paginate a{
             margin: 0 5px;
         }

         div.dataTables_paginate a.current{
             font-weight: bold;
             text-decoration: underline;
         }
    </style>
}

<table id="@Model.Id" class="display @(Model.TableClass ?? DataTableConfigVm.DefaultTableClass ?? "")" @Html.Raw(Model.FixedLayout ? "style='table-layout:fixed'":"")>
    <thead>
        @if (Model.ColumnFilter)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th >@column.DisplayName</th>
                }
            </tr>
        }
        @if (!Model.HideHeaders)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th class="@column.CssClassHeader">@column.DisplayName</th>
                }
            </tr>
        }
    </thead>
    <tbody>
        <tr>
            <td colspan="@Model.Columns.Count()" class="dataTables_empty">Loading data from server
            </td>
        </tr>
    </tbody>
    @if (Model.ShowFooter)
    {
        <tfoot>
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <td class="@column.CssClassFooter"></td>
                }
            </tr>
        </tfoot>
    }
</table>

<script type="text/javascript">
    (
        function setDataTable() {
        if(!window.jQuery || !$.fn.DataTable) {
            setTimeout(setDataTable, 100);
            return;
        }
        var $table = $('#@Model.Id');

        function updateFooter(footerData) {
            @if (Model.ShowFooter)
            {
                Html.Raw("return;");
            }
            
            $table.find('tfoot > tr >td').each(function(index) {
                $(this).text(footerData[index]?footerData[index]:'')
            });
        }

        @{
            var options = new JObject();
            options["aaSorting"] = new JRaw(Model.ColumnSortingString);
            options["bProcessing"] = true;
            options["bStateSave"] = Model.StateSave;
            options["bServerSide"] = true;
            options["bFilter"] = Model.ShowSearch;
            options["sDom"] = Model.Dom;
            if (Model.LengthMenu != null)
            {
                options["lengthMenu"] = new JRaw(Model.LengthMenu);
            }
            if (Model.PageLength.HasValue)
            {
                options["pageLength"] = Model.PageLength;
            }
            options["bAutoWidth"] = Model.AutoWidth;
            options["sAjaxSource"] = Model.AjaxUrl;
            if (Model.TableTools)
            {
                options["oTableTools"] = new JRaw("{ 'sSwfPath': '//cdn.datatables.net/tabletools/2.2.1/swf/copy_csv_xls_pdf.swf' }");
            }
            options["fnServerData"] = new JRaw(
                "function(sSource, aoData, fnCallback) { " +
                "    var ajaxOptions = { 'dataType': 'json', 'type': 'POST', 'url': sSource, 'data': aoData, 'success': function(data){fnCallback(data);if(data.footerData)updateFooter(data.footerData);}}; " +
                (Model.AjaxErrorHandler == null ? "" : ("ajaxOptions['error'] = " + Model.AjaxErrorHandler) + "; ") +
                "    $.ajax(ajaxOptions);" +
                "}");
            options["aoColumnDefs"] = new JRaw(Model.ColumnDefsString);
            options["aoSearchCols"] = Model.SearchCols;
            if (Model.JsOptions.Any())
            {
                foreach (var jsOption in Model.JsOptions)
                {
                    options[jsOption.Key] = new JRaw(jsOption.Value);
                }
            }
            if (!string.IsNullOrWhiteSpace(Model.Language))
            {
                options["oLanguage"] = new JRaw(Model.Language);
            }
            else
            {
                options["oLanguage"] = new JRaw(new Language
                {
                    sProcessing = "[[[Loading]]]",
                    sLengthMenu = "[[[Show _MENU_ entries]]]",
                    sZeroRecords = "[[[No entries.]]]",
                    sInfo = "[[[_START_ to _END_ of _TOTAL_ entries]]]",
                    sInfoEmpty = "[[[0 to 0 of 0 entries]]]",
                    sInfoFiltered = "[[[(filtered of _MAX_  entries)]]]",
                    sInfoPostFix = "",
                    sSearch = "[[[Search]]]",
                    sUrl = "",
                    oPaginate = new Paginate()
                    {
                        sFirst = "[[[First]]]",
                        sPrevious = "[[[Previous]]]",
                        sNext = "[[[Next]]]",
                        sLast = "[[[Last]]]"
                    }
                }.ToJsonString());
            }
            if (!string.IsNullOrWhiteSpace(Model.DrawCallback))
            {
                options["fnDrawCallback"] = new JRaw(Model.DrawCallback);
            }
            if (!string.IsNullOrWhiteSpace(Model.FooterCallback))
            {
                options["fnFooterCallback"] = new JRaw(Model.FooterCallback);
            }
            
        }

        var dt = $table.dataTable(@Html.Raw(options.ToString(Formatting.Indented)));
        @if (Model.ColumnFilter)
        {
            @Html.Raw("dt.columnFilter(" + Model.ColumnFilterVm + ");")
        }
        
        @if (Model.GlobalJsVariableName != null)
        {
            @Html.Raw("window['" + Model.GlobalJsVariableName + "'] = dt;")
        }
    })();
</script>
